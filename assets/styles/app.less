@import url('https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400..700;1,400..700&display=swap');
@import url('https://cdn-uicons.flaticon.com/3.0.0/uicons-regular-rounded/css/uicons-regular-rounded.css');

:root {
    --bg-color: #FFFFFF;
    --text-color: #1E293B;
    --gold-color: #FACC15;
    --gold-dark-color: #EAB308;
    --gold-muted-color: #FEF9C3;

    --box-shadow: 0 0 7px rgba( 0, 0, 0, .5 );

    --main-font-size: 16px;
    --main-font-weight: 400;
}

* { box-sizing: border-box; outline: none; }

html, body {
    width: 100%;
    height: 100%;
    padding: 0;
    margin: 0;
    overflow: hidden;

    /* Container */
    #container {
        .d_flex( column, flex-start, flex-start, 0, none );
        .font( "Lora", sans-serif, var( --main-font-size), var( --main-font-weight), var( --text-color ) );

        background: var( --bg-color );

        width: 100%;
        height: 100%;

        /* Header */
        header {
            .toRem( height, 50px );
            .toRem( min-height, 50px );

            background: var( --bg-color );
            box-shadow: var( --box-shadow );

            width: 100%;
        }

    }
}


/* Functions */

.d_flex( @flexDirection, @alignItems, @justifyContent, @gap, @flexWrap ){
    .toRem( gap, @gap );

    display: flex;

    align-items: @alignItems;
    justify-content: @justifyContent;
    flex-direction: @flexDirection;
    flex-wrap: @flexWrap;
}

.font( @fontName, @fontType, @fontSize, @fontWeight, @fontColor ){
    .toRem( font-size, @fontSize );

    font-family: @fontName, @fontType;
    font-weight: @fontWeight;
    color: @fontColor;
}

.ico( @width, @height, @fontSize, @margin, @color ){
    .d_flex( row, center, center, 0, none );
    
    .toRem( width, @width );
    .toRem( min-width, @width );
    .toRem( height, @height );
    .toRem( min-height, @height );

    i {
        .toRem( font-size, @fontSize );
        .toRem( margin, @margin );

        color: @color;

        display: block;
    }
}

.toRem( @property, @list, @base: 16px ){
    @n: length(@list);

    // Only convert numbers that are not percentages or 0;
    ._merge( @px ) when ( isnumber(@px) ) and not ( ispercentage(@px) ) and not ( @px = 0 ) {
        @rem: ( @px / @base );
        @{property}+_: unit(@rem, rem);
    }
    ._merge( @px ) when ( default() ) {
        @{property}+_: @px;
    }

    ._loop( @n ) when ( @n > 0 ) {
        ._loop((@n - 1));

        @val: extract(@list, @n);
        ._merge( @val ); // merges values onto @property with space character.
    }

    ._loop( @n );
}